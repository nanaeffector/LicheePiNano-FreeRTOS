LicheePi NanoはAllwinnerのF1C100Sが搭載されている。

F1C100SのブートローダはCPUに内蔵ROM内に格納されており、ユーザーによる変更はできない。
これは"BROM"や"eGON"と呼ばれている。（以降、BROMと呼ぶ）
BROMは32kbyteで、CPUの0x00000000-0x00007FFFにマッピングされている


このBROMにより、ユーザコード無しに以下メモリからのBootが可能となっている。
　１．SDカードからBoot
　２．SPI0に接続されたNor/NandフラッシュからBoot
　３．USBからBoot（FELブートという）

BROMは上記１～２の各メモリにBoot可能イメージが書き込まれているかを判定する。
１～２のどれかについて、BROMがBoot可能イメージが書き込まれていると判定した時点で、そのメモリからBootが行われる。
このBootをBoot0と呼ぶ。
どのメモリにもBoot可能イメージが書き込まれていないと判定した場合、FELブートが行われる。


通常、LicheePI Nano はUBootを使用することを想定している模様。
実際、UbootのgitのLicheePI NanoブランチにはBROM起動後のアセンブラコードが書かれている。
　⇒start.s


UBootを使わずにブートローダの部分を自分自身で弄ろうとした場合、
このBROMのデータ構造についてオフィシャルには公開されていないため、
中国の有志が公開している情報を頼りに調査が必要になる。
以下、調査内容。

■BROMの処理内容
・ARMv5コアはリセット解除により、BROMのコードを実行する。

・BROMは、フラッシュメモリの先頭から512バイト(1ブロック分)を読み出す。
　BROMは読み出したヘッダが以下のデータ構造になっていることを期待している。
　　000-003:コード開始アドレス	0xEA000000 | 
		⇒0xEA000000 | ( ( ( sizeof( boot0_file_head_t ) + sizeof( int ) - 1 ) / sizeof( int ) - 2 ) & 0x00FFFFFF ) 
　　004-011:マジックナンバー（"eGON.BT0"）
　　012-015:Boot0のチェックサム
　　016-019:Boot0の長さ
　　020-023:Boot0ヘッダの長さ
　　024-027:ヘッダバージョン or the align size of boot1 ???
    028-031:ヘッダ0バージョン
　　032-035:Boot0バージョン
　　036-039:eGONバージョン
　　040-047:プラットフォーム情報

・ここで、BROMは読み出したデータのチェックを行う。チェック成功条件は以下のとおり。
　「マジックナンバーがASCIIの"eGON.BT0"と一致、かつチェックサムが正常」

・データチェックが成功した場合、BROMはブート領域をSRAM(0番地にリマップ)へコピーし、PCを0番地に設定して、システムを起動。
　ここからCPUの通常起動シーケンスとなる。（リセットベクタからの起動）

・データチェックが失敗した場合、ブートイメージ無しと判定され、FEL起動する。

■BROMに対応したデータの作成方法
mksunxi.exeという中国の有志作成ツールが用意されており、このツールを利用することで
BROMに対応したROMを作成することが可能。


■書き込み方法.
FELsunxi-felというツールを利用してUSBからubootのsplをロードする

FEL起動するための条件は
　「SPIフラッシュが空または未実装、かつSDカード未挿入またはブートイメージ無し」
　　⇒つまり、通常ブートできない場合

LicheePIにはSPIフラッシュが実装されてしまっていて、Bootイメージも書き込み済みである。
よって、そのままではFEL起動はできない。

そこで、SPI0のピンをGNDにショートした状態で起動することで強制的にFEL起動させることが可能。
※USB接続⇒リセット実施⇒SPI0のピンを47オーム抵抗でGNDにプルダウン⇒リセット解放
